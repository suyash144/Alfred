// src/components/DataSourceSelector.js
import React, { useState, useEffect } from 'react';
import Form from 'react-bootstrap/Form';
import Card from 'react-bootstrap/Card';
import Button from 'react-bootstrap/Button';
import ListGroup from 'react-bootstrap/ListGroup';
import Collapse from 'react-bootstrap/Collapse';
import Tabs from 'react-bootstrap/Tabs';
import Tab from 'react-bootstrap/Tab';

const DataSourceSelector = ({
    dataSource,
    selectedFiles,
    useCustomPrompt,
    customPromptText,
    // uploadedPromptContent, // We'll handle reading inside
    onDataSourceChange,
    onFilesChange,
    onUseCustomPromptChange,
    onCustomPromptTextChange,
    onPromptFileChange, // Pass file object
    isDisabled,
}) => {
    const [showFileUpload, setShowFileUpload] = useState(dataSource === 'custom');
    const [showCustomPrompt, setShowCustomPrompt] = useState(useCustomPrompt);
    const [promptFileContentPreview, setPromptFileContentPreview] = useState('');
    const [promptFileName, setPromptFileName] = useState('');

    useEffect(() => {
        setShowFileUpload(dataSource === 'custom');
    }, [dataSource]);

    useEffect(() => {
        setShowCustomPrompt(useCustomPrompt);
    }, [useCustomPrompt]);

    const handleDataSourceRadio = (e) => {
        onDataSourceChange(e.target.value);
    };

     const handleFileSelect = (e) => {
        onFilesChange(Array.from(e.target.files));
    };

     const handlePromptFileSelect = (e) => {
        const file = e.target.files[0];
        if (file) {
            setPromptFileName(file.name);
            const reader = new FileReader();
            reader.onload = (event) => {
                const content = event.target.result;
                setPromptFileContentPreview(content.length > 200 ? content.substring(0, 200) + '...' : content);
                onPromptFileChange(file); // Pass the file object up
            };
             reader.onerror = () => {
                 alert('Error reading prompt file.');
                 setPromptFileName('');
                 setPromptFileContentPreview('');
                 onPromptFileChange(null);
             };
            reader.readAsText(file);
        } else {
            setPromptFileName('');
            setPromptFileContentPreview('');
            onPromptFileChange(null);
        }
    };

    return (
        <Card className="data-source-selector">
            <Card.Body>
                <Card.Title as="h4">Select Data and Prompt</Card.Title>
                <Form.Check
                    type="radio"
                    label="Use auto-generated test data"
                    name="dataSource"
                    id="autoGeneratedData"
                    value="auto"
                    checked={dataSource === 'auto'}
                    onChange={handleDataSourceRadio}
                    disabled={isDisabled}
                />
                <Form.Check
                    type="radio"
                    label="Upload my own data"
                    name="dataSource"
                    id="customData"
                    value="custom"
                    checked={dataSource === 'custom'}
                    onChange={handleDataSourceRadio}
                    disabled={isDisabled}
                    className="mb-2"
                />

                <Collapse in={showFileUpload}>
                    <div id="file-upload-collapse"> {/* Required for Collapse */}
                        <Card className="file-upload-container mt-3">
                             <Card.Body>
                                <Form.Group controlId="dataFile" className="mb-3">
                                    <Form.Label>Upload Data Files (.npy, .csv, .json)</Form.Label>
                                    <Form.Control
                                        type="file"
                                        accept=".npy,.csv,.json"
                                        multiple
                                        onChange={handleFileSelect}
                                        disabled={isDisabled}
                                     />
                                    <Form.Text muted>
                                        Select one or more files.
                                    </Form.Text>
                                </Form.Group>

                                {selectedFiles.length > 0 && (
                                    <div className="uploaded-file-info mt-2">
                                        <p>Selected {selectedFiles.length} file(s):</p>
                                        <ListGroup id="fileDetailsList" style={{ maxHeight: '200px', overflowY: 'auto' }}>
                                            {selectedFiles.map((file, index) => (
                                                <ListGroup.Item key={index} className="d-flex justify-content-between align-items-center">
                                                    <span>
                                                         {file.name.endsWith('.csv') ? 'üìä' : 'üìÅ'} <strong>{file.name}</strong>
                                                    </span>
                                                    <span className="badge bg-primary rounded-pill">
                                                        {(file.size / 1024).toFixed(1)} KB
                                                    </span>
                                                </ListGroup.Item>
                                            ))}
                                        </ListGroup>
                                    </div>
                                )}
                            </Card.Body>
                        </Card>
                    </div>
                </Collapse>

                {/* Custom Prompt Section */}
                 <div className="custom-prompt-container mt-3">
                    <Form.Check
                        type="checkbox"
                        id="useCustomPrompt"
                        label="Use custom initial prompt"
                        checked={useCustomPrompt}
                        onChange={(e) => onUseCustomPromptChange(e.target.checked)}
                        disabled={isDisabled}
                        className="mb-2"
                    />
                    <Collapse in={showCustomPrompt}>
                        <div id="custom-prompt-collapse"> {/* Required for Collapse */}
                            <Tabs defaultActiveKey="type" id="prompt-input-tabs" className="mb-3">
                                <Tab eventKey="type" title="Type Prompt">
                                    <Form.Control
                                        as="textarea"
                                        rows={4}
                                        placeholder="Describe your data and goals..."
                                        value={customPromptText}
                                        onChange={(e) => onCustomPromptTextChange(e.target.value)}
                                        disabled={isDisabled}
                                    />
                                </Tab>
                                <Tab eventKey="upload" title="Upload Prompt File">
                                    <Form.Group controlId="promptFile" className="mb-3">
                                        <Form.Control
                                            type="file"
                                            accept=".txt,.md"
                                            onChange={handlePromptFileSelect}
                                            disabled={isDisabled}
                                        />
                                        <Form.Text muted>Upload a .txt or .md file.</Form.Text>
                                    </Form.Group>
                                     {promptFileName && (
                                        <Card className="mt-3 p-2 bg-light">
                                            <Card.Body>
                                                <h6 className="mb-1">Prompt File: {promptFileName}</h6>
                                                {promptFileContentPreview && (
                                                    <div className="text-muted small">
                                                        <strong>Preview:</strong>
                                                        <pre style={{ whiteSpace: 'pre-wrap', maxHeight: '100px', overflow: 'auto' }}>
                                                            {promptFileContentPreview}
                                                        </pre>
                                                    </div>
                                                 )}
                                            </Card.Body>
                                        </Card>
                                    )}
                                </Tab>
                            </Tabs>
                             <Form.Text muted>
                                Custom prompt will be added to the default analysis instruction.
                             </Form.Text>
                        </div>
                    </Collapse>
                 </div>
            </Card.Body>
        </Card>
    );
};

export default DataSourceSelector;